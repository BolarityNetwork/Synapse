/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBoolDecoder,
  getBoolEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export type FinalTransaction = {
  discriminator: bigint;
  sequence: bigint;
  stateRoot: ReadonlyUint8Array;
  epoch: bigint;
  accepted: number;
  votes: number;
};

export type FinalTransactionArgs = {
  discriminator: number | bigint;
  sequence: number | bigint;
  stateRoot: ReadonlyUint8Array;
  epoch: number | bigint;
  accepted: number;
  votes: number;
};

export function getFinalTransactionEncoder(): Encoder<FinalTransactionArgs> {
  return getStructEncoder([
    ['discriminator', getU64Encoder()],
    ['sequence', getU64Encoder()],
    ['stateRoot', fixEncoderSize(getBytesEncoder(), 32)],
    ['epoch', getU64Encoder()],
    ['accepted', getBoolEncoder()],
    ['votes', getU8Encoder()],
  ]);
}

export function getFinalTransactionDecoder(): Decoder<FinalTransaction> {
  return getStructDecoder([
    ['discriminator', getU64Decoder()],
    ['sequence', getU64Decoder()],
    ['stateRoot', fixDecoderSize(getBytesDecoder(), 32)],
    ['epoch', getU64Decoder()],
    ['accepted', getBoolDecoder()],
    ['votes', getU8Decoder()],
  ]);
}

export function getFinalTransactionCodec(): Codec<
  FinalTransactionArgs,
  FinalTransaction
> {
  return combineCodec(
    getFinalTransactionEncoder(),
    getFinalTransactionDecoder()
  );
}

export function decodeFinalTransaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<FinalTransaction, TAddress>;
export function decodeFinalTransaction<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<FinalTransaction, TAddress>;
export function decodeFinalTransaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<FinalTransaction, TAddress>
  | MaybeAccount<FinalTransaction, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getFinalTransactionDecoder()
  );
}

export async function fetchFinalTransaction<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<FinalTransaction, TAddress>> {
  const maybeAccount = await fetchMaybeFinalTransaction(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeFinalTransaction<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<FinalTransaction, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeFinalTransaction(maybeAccount);
}

export async function fetchAllFinalTransaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<FinalTransaction>[]> {
  const maybeAccounts = await fetchAllMaybeFinalTransaction(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeFinalTransaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<FinalTransaction>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeFinalTransaction(maybeAccount)
  );
}
