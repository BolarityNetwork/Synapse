/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';

export type CounterAccount = { discriminator: bigint; count: bigint };

export type CounterAccountArgs = {
  discriminator: number | bigint;
  count: number | bigint;
};

export function getCounterAccountEncoder(): Encoder<CounterAccountArgs> {
  return getStructEncoder([
    ['discriminator', getU64Encoder()],
    ['count', getU64Encoder()],
  ]);
}

export function getCounterAccountDecoder(): Decoder<CounterAccount> {
  return getStructDecoder([
    ['discriminator', getU64Decoder()],
    ['count', getU64Decoder()],
  ]);
}

export function getCounterAccountCodec(): Codec<
  CounterAccountArgs,
  CounterAccount
> {
  return combineCodec(getCounterAccountEncoder(), getCounterAccountDecoder());
}

export function decodeCounterAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<CounterAccount, TAddress>;
export function decodeCounterAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<CounterAccount, TAddress>;
export function decodeCounterAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<CounterAccount, TAddress> | MaybeAccount<CounterAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCounterAccountDecoder()
  );
}

export async function fetchCounterAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<CounterAccount, TAddress>> {
  const maybeAccount = await fetchMaybeCounterAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCounterAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<CounterAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCounterAccount(maybeAccount);
}

export async function fetchAllCounterAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<CounterAccount>[]> {
  const maybeAccounts = await fetchAllMaybeCounterAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCounterAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<CounterAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeCounterAccount(maybeAccount)
  );
}

export function getCounterAccountSize(): number {
  return 8;
}
