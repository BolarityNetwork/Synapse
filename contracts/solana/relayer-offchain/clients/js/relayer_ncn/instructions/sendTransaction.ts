/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SEND_TRANSACTION_DISCRIMINATOR = 15;

export function getSendTransactionDiscriminatorBytes() {
  return getU8Encoder().encode(SEND_TRANSACTION_DISCRIMINATOR);
}

export type SendTransactionInstruction<
  TProgram extends string = typeof RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountBallotBox extends string | IAccountMeta<string> = string,
  TAccountHubConfig extends string | IAccountMeta<string> = string,
  TAccountRelayerInfo extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountRelayerHubProgram extends string | IAccountMeta<string> = string,
  TAccountRestakingProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountBallotBox extends string
        ? ReadonlyAccount<TAccountBallotBox>
        : TAccountBallotBox,
      TAccountHubConfig extends string
        ? ReadonlyAccount<TAccountHubConfig>
        : TAccountHubConfig,
      TAccountRelayerInfo extends string
        ? ReadonlyAccount<TAccountRelayerInfo>
        : TAccountRelayerInfo,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountRelayerHubProgram extends string
        ? ReadonlyAccount<TAccountRelayerHubProgram>
        : TAccountRelayerHubProgram,
      TAccountRestakingProgram extends string
        ? ReadonlyAccount<TAccountRestakingProgram>
        : TAccountRestakingProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SendTransactionInstructionData = {
  discriminator: number;
  epoch: bigint;
  chain: number;
  sequence: bigint;
};

export type SendTransactionInstructionDataArgs = {
  epoch: number | bigint;
  chain: number;
  sequence: number | bigint;
};

export function getSendTransactionInstructionDataEncoder(): Encoder<SendTransactionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['epoch', getU64Encoder()],
      ['chain', getU16Encoder()],
      ['sequence', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SEND_TRANSACTION_DISCRIMINATOR })
  );
}

export function getSendTransactionInstructionDataDecoder(): Decoder<SendTransactionInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['epoch', getU64Decoder()],
    ['chain', getU16Decoder()],
    ['sequence', getU64Decoder()],
  ]);
}

export function getSendTransactionInstructionDataCodec(): Codec<
  SendTransactionInstructionDataArgs,
  SendTransactionInstructionData
> {
  return combineCodec(
    getSendTransactionInstructionDataEncoder(),
    getSendTransactionInstructionDataDecoder()
  );
}

export type SendTransactionInput<
  TAccountConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountBallotBox extends string = string,
  TAccountHubConfig extends string = string,
  TAccountRelayerInfo extends string = string,
  TAccountPool extends string = string,
  TAccountRelayerHubProgram extends string = string,
  TAccountRestakingProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  ncn: Address<TAccountNcn>;
  ballotBox: Address<TAccountBallotBox>;
  hubConfig: Address<TAccountHubConfig>;
  relayerInfo: Address<TAccountRelayerInfo>;
  pool: Address<TAccountPool>;
  relayerHubProgram: Address<TAccountRelayerHubProgram>;
  restakingProgram: Address<TAccountRestakingProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  epoch: SendTransactionInstructionDataArgs['epoch'];
  chain: SendTransactionInstructionDataArgs['chain'];
  sequence: SendTransactionInstructionDataArgs['sequence'];
};

export function getSendTransactionInstruction<
  TAccountConfig extends string,
  TAccountNcn extends string,
  TAccountBallotBox extends string,
  TAccountHubConfig extends string,
  TAccountRelayerInfo extends string,
  TAccountPool extends string,
  TAccountRelayerHubProgram extends string,
  TAccountRestakingProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS,
>(
  input: SendTransactionInput<
    TAccountConfig,
    TAccountNcn,
    TAccountBallotBox,
    TAccountHubConfig,
    TAccountRelayerInfo,
    TAccountPool,
    TAccountRelayerHubProgram,
    TAccountRestakingProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SendTransactionInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountNcn,
  TAccountBallotBox,
  TAccountHubConfig,
  TAccountRelayerInfo,
  TAccountPool,
  TAccountRelayerHubProgram,
  TAccountRestakingProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    ncn: { value: input.ncn ?? null, isWritable: false },
    ballotBox: { value: input.ballotBox ?? null, isWritable: false },
    hubConfig: { value: input.hubConfig ?? null, isWritable: false },
    relayerInfo: { value: input.relayerInfo ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    relayerHubProgram: {
      value: input.relayerHubProgram ?? null,
      isWritable: false,
    },
    restakingProgram: {
      value: input.restakingProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.ballotBox),
      getAccountMeta(accounts.hubConfig),
      getAccountMeta(accounts.relayerInfo),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.relayerHubProgram),
      getAccountMeta(accounts.restakingProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSendTransactionInstructionDataEncoder().encode(
      args as SendTransactionInstructionDataArgs
    ),
  } as SendTransactionInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountNcn,
    TAccountBallotBox,
    TAccountHubConfig,
    TAccountRelayerInfo,
    TAccountPool,
    TAccountRelayerHubProgram,
    TAccountRestakingProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSendTransactionInstruction<
  TProgram extends string = typeof RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    ncn: TAccountMetas[1];
    ballotBox: TAccountMetas[2];
    hubConfig: TAccountMetas[3];
    relayerInfo: TAccountMetas[4];
    pool: TAccountMetas[5];
    relayerHubProgram: TAccountMetas[6];
    restakingProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: SendTransactionInstructionData;
};

export function parseSendTransactionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSendTransactionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      ncn: getNextAccount(),
      ballotBox: getNextAccount(),
      hubConfig: getNextAccount(),
      relayerInfo: getNextAccount(),
      pool: getNextAccount(),
      relayerHubProgram: getNextAccount(),
      restakingProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSendTransactionInstructionDataDecoder().decode(instruction.data),
  };
}
