/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_COUNTER_DISCRIMINATOR = 0;

export function getInitializeCounterDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_COUNTER_DISCRIMINATOR);
}

export type InitializeCounterInstruction<
  TProgram extends string = typeof RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountCounter extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCounter extends string
        ? WritableSignerAccount<TAccountCounter> &
            IAccountSignerMeta<TAccountCounter>
        : TAccountCounter,
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeCounterInstructionData = {
  discriminator: number;
  initialValue: bigint;
};

export type InitializeCounterInstructionDataArgs = {
  initialValue: number | bigint;
};

export function getInitializeCounterInstructionDataEncoder(): Encoder<InitializeCounterInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['initialValue', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_COUNTER_DISCRIMINATOR })
  );
}

export function getInitializeCounterInstructionDataDecoder(): Decoder<InitializeCounterInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['initialValue', getU64Decoder()],
  ]);
}

export function getInitializeCounterInstructionDataCodec(): Codec<
  InitializeCounterInstructionDataArgs,
  InitializeCounterInstructionData
> {
  return combineCodec(
    getInitializeCounterInstructionDataEncoder(),
    getInitializeCounterInstructionDataDecoder()
  );
}

export type InitializeCounterInput<
  TAccountCounter extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  counter: TransactionSigner<TAccountCounter>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  initialValue: InitializeCounterInstructionDataArgs['initialValue'];
};

export function getInitializeCounterInstruction<
  TAccountCounter extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeCounterInput<
    TAccountCounter,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeCounterInstruction<
  TProgramAddress,
  TAccountCounter,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    counter: { value: input.counter ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.counter),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeCounterInstructionDataEncoder().encode(
      args as InitializeCounterInstructionDataArgs
    ),
  } as InitializeCounterInstruction<
    TProgramAddress,
    TAccountCounter,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeCounterInstruction<
  TProgram extends string = typeof RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    counter: TAccountMetas[0];
    payer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializeCounterInstructionData;
};

export function parseInitializeCounterInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeCounterInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      counter: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeCounterInstructionDataDecoder().decode(instruction.data),
  };
}
