/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type WritableAccount,
} from '@solana/web3.js';
import { RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INCREMENT_COUNTER_DISCRIMINATOR = 1;

export function getIncrementCounterDiscriminatorBytes() {
  return getU8Encoder().encode(INCREMENT_COUNTER_DISCRIMINATOR);
}

export type IncrementCounterInstruction<
  TProgram extends string = typeof RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountCounter extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCounter extends string
        ? WritableAccount<TAccountCounter>
        : TAccountCounter,
      ...TRemainingAccounts,
    ]
  >;

export type IncrementCounterInstructionData = { discriminator: number };

export type IncrementCounterInstructionDataArgs = {};

export function getIncrementCounterInstructionDataEncoder(): Encoder<IncrementCounterInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: INCREMENT_COUNTER_DISCRIMINATOR })
  );
}

export function getIncrementCounterInstructionDataDecoder(): Decoder<IncrementCounterInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getIncrementCounterInstructionDataCodec(): Codec<
  IncrementCounterInstructionDataArgs,
  IncrementCounterInstructionData
> {
  return combineCodec(
    getIncrementCounterInstructionDataEncoder(),
    getIncrementCounterInstructionDataDecoder()
  );
}

export type IncrementCounterInput<TAccountCounter extends string = string> = {
  counter: Address<TAccountCounter>;
};

export function getIncrementCounterInstruction<
  TAccountCounter extends string,
  TProgramAddress extends Address = typeof RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS,
>(
  input: IncrementCounterInput<TAccountCounter>,
  config?: { programAddress?: TProgramAddress }
): IncrementCounterInstruction<TProgramAddress, TAccountCounter> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    counter: { value: input.counter ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.counter)],
    programAddress,
    data: getIncrementCounterInstructionDataEncoder().encode({}),
  } as IncrementCounterInstruction<TProgramAddress, TAccountCounter>;

  return instruction;
}

export type ParsedIncrementCounterInstruction<
  TProgram extends string = typeof RELAYER_NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    counter: TAccountMetas[0];
  };
  data: IncrementCounterInstructionData;
};

export function parseIncrementCounterInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedIncrementCounterInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      counter: getNextAccount(),
    },
    data: getIncrementCounterInstructionDataDecoder().decode(instruction.data),
  };
}
